/*
    n번째 수는 n-1번째와 n-2번째 수를 합하여 나타내는
    피보나치 수열(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...)을 구하는 함수
*/

// 이렇게 불필요한 중복호출이 많을 경우 런타임이 길어진다.
/*
어떠한 문제를 풀 때, 작성한 소스가 입력된 값에 대해 문제를 해결하는 데 필요한 시간을 시간복잡도라고 하며, 
위의 문제와 같이 풀 경우 이 시간복잡도가 가파르게 증가하게 된다.
*/

function fibonacci(n) {
  if (n <= 1) {
    return n;
  }
  return fibonacci(n - 1) + fibonacci(n - 2);
}

// 재귀함수 한번만 부르기
function fibonacci1(n) {
  // 초기 배열이 [0, 1]에서 시작하여 배열의 요소를 누적해 나가는 방법
  // 그리고 이미 구해놓은 것은 배열의 요소로 저장해놓기! 그래야 런타임이 초과되지 않는다.

  let newArr = [0, 1]; //0번째 1번째 요소는 고정시켜두고

  let fib = (n) => {
    //함수 한개를 선언해주고
    if (newArr[n] !== undefined) {
      return newArr[n]; //이미 있는 건 그대로 리턴
    }

    newArr[n] = fib(n - 1) + fib(n - 2); //없는 건 새로 만들어서 저장!
    return newArr[n];
  };

  return fib(n);
}
